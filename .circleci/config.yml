version: 2
jobs:
#  x86_64_linux_build:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    resource_class: xlarge
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - checkout
#      - run:
#          name: Version Information
#          command: rustc --version; cargo --version; rustup --version
#      - restore_cache:
#          keys:
#            - v4-cargo-cache-x86_64-linux-{{ checksum "Cargo.lock" }}
#      - run:
#          name: Build all targets
#          command: cargo test --all --all-targets --locked --no-run
#      - save_cache:
#          key: v4-cargo-cache-x86_64-linux-{{ checksum "Cargo.lock" }}
#          paths:
#            - cargo
#            - target/debug/.fingerprint
#            - target/debug/build
#            - target/debug/deps
#      - persist_to_workspace:
#          root: .
#          paths:
#            - cargo
#            - examples
#            - liblumen_alloc
#            - liblumen_alloc_macros
#            - liblumen_arena
#            - liblumen_beam
#            - liblumen_codegen
#            - liblumen_common
#            - liblumen_compiler
#            - liblumen_core
#            - liblumen_diagnostics
#            - liblumen_eir_interpreter
#            - liblumen_syntax
#            - lumen
#            - lumen_runtime
#            - lumen_web
#            - target/debug/.fingerprint
#            - target/debug/build
#            - target/debug/deps
#            - .rustfmt.toml
#            - Cargo.lock
#            - Cargo.toml
#            - Makefile
  x86_64_macos_build:
    macos:
      # a version needs to be picked.  The latest, non-beta was chosen.
      xcode: "10.3.0"
    environment:
      CARGO_HOME: cargo
      HOMEBREW_NO_AUTO_UPDATE: 1
      LLVM_SYS_70_PREFIX: /usr/local/opt/llvm
    steps:
      - checkout
      - run:
          name: Install rustup and nightly toolchain
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain=nightly
            echo 'export PATH=/Users/distiller/project/cargo/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install LLVM
          command: brew install llvm
      - run:
          name: Version Information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Build all targets
          command: cargo test --all --all-targets --locked --no-run         j
#  wasm32_build:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - checkout
#      - run:
#          name: Version Information
#          command: rustc --version; cargo --version; rustup --version
#      - restore_cache:
#          keys:
#            - v4-cargo-cache-wasm32-{{ checksum "Cargo.lock" }}
#      - run:
#          working_directory: "lumen_runtime"
#          command: wasm-pack build
#      - save_cache:
#          key: v4-cargo-cache-wasm32-{{ checksum "Cargo.lock" }}
#          paths:
#            - cargo
#            - target/debug/.fingerprint
#            - target/debug/build
#            - target/debug/deps
#      - persist_to_workspace:
#          root: .
#          paths:
#            - cargo
#            - examples
#            - liblumen_alloc
#            - liblumen_alloc_macros
#            - liblumen_arena
#            - liblumen_beam
#            - liblumen_codegen
#            - liblumen_common
#            - liblumen_compiler
#            - liblumen_core
#            - liblumen_diagnostics
#            - liblumen_eir_interpreter
#            - liblumen_syntax
#            - lumen
#            - lumen_runtime
#            - lumen_web
#            - target/debug/.fingerprint
#            - target/debug/build
#            - target/debug/deps
#            - .rustfmt.toml
#            - Cargo.lock
#            - Cargo.toml
#            - Makefile
#  check_formatted:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Check formatting
#          command: |
#            rustfmt --version
#            cargo fmt -- --check
#  wasm32_chrome_examples_spawn_chain_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "examples/spawn-chain"
#          command: wasm-pack test --chrome --headless
#  wasm32_firefox_examples_spawn_chain_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "examples/spawn-chain"
#          command: wasm-pack test --firefox --headless
#  x86_64_examples_spawn_chain_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "examples/spawn-chain"
#          command: cargo test --locked -- --test-threads=1
#  x86_64_liblumen_alloc_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_alloc"
#          command: cargo test --locked
#  x86_64_liblumen_arena_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_arena"
#          command: cargo test --locked
#  x86_64_liblumen_beam_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_beam"
#          command: cargo test --locked
#  x86_64_linux_liblumen_codegen_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_codegen"
#          command: cargo test --locked
#  x86_64_linux_liblumen_common_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_common"
#          command: cargo test --locked
#  x86_64_linux_liblumen_compiler_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_compiler"
#          command: cargo test --locked
#  x86_64_linux_liblumen_core_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_core"
#          command: cargo test --locked
#  x86_64_linux_liblumen_diagnostics_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_diagnostics"
#          command: cargo test --locked
#  x86_64_linux_liblumen_eir_interpreter_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_eir_interpreter"
#          command: cargo test --locked
#      - run:
#          name: Fibonacci
#          working_directory: "liblumen_eir_interpreter"
#          command: cargo run -- --ident fib:run/0 fib.erl
#  x86_64_linux_liblumen_syntax_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "liblumen_syntax"
#          command: cargo test --locked
#  x86_64_linux_lumen_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "lumen"
#          command: cargo test --locked
#  x86_64_linux_lumen_runtime_test:
#    docker:
#      # `kronicdeth` is temporary until we get a DockerHub organization
#      - image: kronicdeth/lumen-development
#    resource_class: xlarge
#    environment:
#      CARGO_HOME: cargo
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Run all tests
#          working_directory: "lumen_runtime"
#          command: cargo test --locked

workflows:
  version: 2
  primary:
    jobs:
#      - x86_64_linux_build
      - x86_64_macos_build
#      - wasm32_build
#      - check_formatted:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_examples_spawn_chain_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_alloc_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_arena_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_beam_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_codegen_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_common_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_compiler_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_core_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_diagnostics_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_eir_interpreter_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_liblumen_syntax_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_lumen_test:
#          requires:
#            - x86_64_linux_build
#      - x86_64_linux_lumen_runtime_test:
#          requires:
#            - x86_64_linux_build
#      - wasm32_chrome_examples_spawn_chain_test:
#          requires:
#            - wasm32_build
#      - wasm32_firefox_examples_spawn_chain_test:
#          requires:
#            - wasm32_build
#

